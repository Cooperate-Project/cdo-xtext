package net.winklerweb.cdoxtext.generator.emfcompare;

import com.google.inject.Inject;
import com.google.inject.name.Named;
import java.util.Set;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.generator.BindFactory;
import org.eclipse.xtext.generator.Binding;
import org.eclipse.xtext.generator.Generator;
import org.eclipse.xtext.generator.Naming;
import org.eclipse.xtext.generator.Xtend2ExecutionContext;
import org.eclipse.xtext.generator.Xtend2GeneratorFragment;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class EMFCompareMatcherFragment extends Xtend2GeneratorFragment {
  @Inject
  private Grammar grammar;
  
  @Inject
  @Named("fileHeader")
  private String fileHeader;
  
  @Inject
  @Extension
  private Naming _naming;
  
  public String matchEngineFactoryName(final Grammar grammar) {
    Naming _naming = this.getNaming();
    String _basePackageUi = _naming.basePackageUi(grammar);
    String _plus = (_basePackageUi + ".cdoxtext.");
    String _name = GrammarUtil.getName(grammar);
    String _plus_1 = (_plus + _name);
    String _plus_2 = (_plus_1 + "MatchEngineFactory");
    return _plus_2;
  }
  
  public String distanceFunctionName(final Grammar grammar) {
    Naming _naming = this.getNaming();
    String _basePackageUi = _naming.basePackageUi(grammar);
    String _plus = (_basePackageUi + ".cdoxtext.");
    String _name = GrammarUtil.getName(grammar);
    String _plus_1 = (_plus + _name);
    String _plus_2 = (_plus_1 + "DistanceFunction");
    return _plus_2;
  }
  
  public Set<Binding> getGuiceBindingsUi(final Grammar grammar) {
    BindFactory _bindFactory = new BindFactory();
    String _matchEngineFactoryName = this.matchEngineFactoryName(grammar);
    BindFactory _addTypeToType = _bindFactory.addTypeToType(
      "org.eclipse.emf.compare.match.IMatchEngine.Factory", _matchEngineFactoryName);
    String _distanceFunctionName = this.distanceFunctionName(grammar);
    BindFactory _addTypeToType_1 = _addTypeToType.addTypeToType(
      "org.eclipse.emf.compare.match.eobject.ProximityEObjectMatcher.DistanceFunction", _distanceFunctionName);
    Set<Binding> _bindings = _addTypeToType_1.getBindings();
    return _bindings;
  }
  
  public String[] getRequiredBundlesUi(final Grammar grammar) {
    return new String[] { "org.eclipse.emf.compare", "org.eclipse.emf.compare.rcp", "org.eclipse.emf.compare.rcp.ui" };
  }
  
  public void addToPluginXmlUi(final Xtend2ExecutionContext ctx) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<extension");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("point=\"org.eclipse.emf.compare.rcp.matchEngine\">");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("<engineFactory");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("class=\"");
    String _executableExtensionFactory = this._naming.executableExtensionFactory(this.grammar);
    _builder.append(_executableExtensionFactory, "         ");
    _builder.append(":");
    String _matchEngineFactoryName = this.matchEngineFactoryName(this.grammar);
    _builder.append(_matchEngineFactoryName, "         ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("ranking=\"20\">");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("</engineFactory>");
    _builder.newLine();
    _builder.append("</extension>\t");
    _builder.newLine();
    ctx.append(_builder);
  }
  
  public void generate(final Xtend2ExecutionContext ctx) {
    this.generateMatchEngineFactory(ctx);
    this.generateDistanceFunction(ctx);
  }
  
  public void generateMatchEngineFactory(final Xtend2ExecutionContext ctx) {
    String _matchEngineFactoryName = this.matchEngineFactoryName(this.grammar);
    String _asPath = this._naming.asPath(_matchEngineFactoryName);
    String _plus = (_asPath + ".xtend");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.append(this.fileHeader, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package ");
    String _matchEngineFactoryName_1 = this.matchEngineFactoryName(this.grammar);
    String _packageName = this._naming.toPackageName(_matchEngineFactoryName_1);
    _builder.append(_packageName, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.google.inject.Inject");
    _builder.newLine();
    _builder.append("import com.google.inject.Provider");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.compare.match.DefaultComparisonFactory");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.compare.match.DefaultEqualityHelperFactory");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.compare.match.DefaultMatchEngine");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.compare.match.eobject.ProximityEObjectMatcher");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.compare.match.impl.MatchEngineFactoryImpl");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _matchEngineFactoryName_2 = this.matchEngineFactoryName(this.grammar);
    String _simpleName = this._naming.toSimpleName(_matchEngineFactoryName_2);
    _builder.append(_simpleName, "");
    _builder.append(" extends MatchEngineFactoryImpl { ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Provider<ProximityEObjectMatcher$DistanceFunction> dfProvider");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override getMatchEngine() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val matcher = new ProximityEObjectMatcher(dfProvider.get)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new DefaultMatchEngine(matcher, new DefaultComparisonFactory(new DefaultEqualityHelperFactory()))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    ctx.writeFile(Generator.SRC_UI, _plus, _builder);
  }
  
  public void generateDistanceFunction(final Xtend2ExecutionContext ctx) {
    String _distanceFunctionName = this.distanceFunctionName(this.grammar);
    String _asPath = this._naming.asPath(_distanceFunctionName);
    String _plus = (_asPath + ".xtend");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append(this.fileHeader, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package ");
    String _distanceFunctionName_1 = this.distanceFunctionName(this.grammar);
    String _packageName = this._naming.toPackageName(_distanceFunctionName_1);
    _builder.append(_packageName, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.google.inject.Inject");
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.compare.Comparison");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.compare.match.eobject.ProximityEObjectMatcher$DistanceFunction");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EAttribute");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EReference");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EStructuralFeature");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.util.EcoreUtil");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.util.FeatureMap");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.util.FeatureMapUtil");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _distanceFunctionName_2 = this.distanceFunctionName(this.grammar);
    String _simpleName = this._naming.toSimpleName(_distanceFunctionName_2);
    _builder.append(_simpleName, "");
    _builder.append(" implements ProximityEObjectMatcher$DistanceFunction { ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("EcoreUtil$EqualityHelper eqHelper");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override distance(Comparison comp, EObject a, EObject b) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!a.eClass.equals(b.eClass)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Integer::MAX_VALUE");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val eClass = a.eClass");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val size = eClass.featureCount");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val matches = eClass.getEAllStructuralFeatures.fold(0, [ count, feature | return count + if(!feature.isDerived && haveEqualFeature(a,b,feature)) 1 else 0 ])");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return size - matches");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def haveEqualFeature(EObject eObject1, EObject eObject2, EStructuralFeature feature) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return eObject1.eIsSet(feature) == eObject2.eIsSet(feature)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("&& if (feature instanceof EReference)  haveEqualReference(eObject1, eObject2, feature as EReference)");
    _builder.newLine();
    _builder.append("\t\t\t\t   ");
    _builder.append("else haveEqualAttribute(eObject1, eObject2, feature as EAttribute)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def haveEqualReference(EObject eObject1, EObject eObject2, EReference reference) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val value1 = eObject1.eGet(reference)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val value2 = eObject2.eGet(reference)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return if(reference.isMany()) eqHelper.equals(value1 as List<EObject>, value2 as List<EObject>) ");
    _builder.newLine();
    _builder.append("\t\t\t   ");
    _builder.append("else eqHelper.equals(value1 as EObject, value2 as EObject)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def haveEqualAttribute(EObject eObject1, EObject eObject2, EAttribute attribute) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val value1 = eObject1.eGet(attribute)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val value2 = eObject2.eGet(attribute)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (value1 == null) return value2 == null");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (value2 == null) return false");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (FeatureMapUtil::isFeatureMap(attribute)) return equalFeatureMaps(value1 as FeatureMap, value2 as FeatureMap)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return value1.equals(value2)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def equalFeatureMaps(FeatureMap featureMap1, FeatureMap featureMap2) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (featureMap1.size != featureMap2.size) return false");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i : 0 ..<featureMap1.size) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("val feature = featureMap1.getEStructuralFeature(i)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (feature != featureMap2.getEStructuralFeature(i)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return false");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("val value1 = featureMap1.getValue(i)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("val value2 = featureMap2.getValue(i)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (!equalFeatureMapValues(value1, value2, feature)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return false");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def equalFeatureMapValues(Object value1, Object value2, EStructuralFeature feature) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (feature instanceof EReference) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return eqHelper.equals(value1 as EObject, value2 as EObject)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return if(value1 == null)  value2 == null ");
    _builder.newLine();
    _builder.append("\t\t\t\t   ");
    _builder.append("else value1.equals(value2)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override areIdentic(Comparison comp, EObject a, EObject b) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return eqHelper.equals(a, b)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    ctx.writeFile(Generator.SRC_UI, _plus, _builder);
  }
}
