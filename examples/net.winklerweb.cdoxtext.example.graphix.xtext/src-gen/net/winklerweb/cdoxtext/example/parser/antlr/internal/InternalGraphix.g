/*
* generated by Xtext
*/
grammar InternalGraphix;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package net.winklerweb.cdoxtext.example.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.winklerweb.cdoxtext.example.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.winklerweb.cdoxtext.example.services.GraphixGrammarAccess;

}

@parser::members {

 	private GraphixGrammarAccess grammarAccess;
 	
    public InternalGraphixParser(TokenStream input, GraphixGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "GraphixCanvas";	
   	}
   	
   	@Override
   	protected GraphixGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleGraphixCanvas
entryRuleGraphixCanvas returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraphixCanvasRule()); }
	 iv_ruleGraphixCanvas=ruleGraphixCanvas 
	 { $current=$iv_ruleGraphixCanvas.current; } 
	 EOF 
;

// Rule GraphixCanvas
ruleGraphixCanvas returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Canvas' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGraphixCanvasAccess().getCanvasKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGraphixCanvasAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGraphixCanvasAccess().getLowerLeftBoundsPointParserRuleCall_2_0()); 
	    }
		lv_lowerLeftBounds_2_0=rulePoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraphixCanvasRule());
	        }
       		set(
       			$current, 
       			"lowerLeftBounds",
        		lv_lowerLeftBounds_2_0, 
        		"Point");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='..' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGraphixCanvasAccess().getFullStopFullStopKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGraphixCanvasAccess().getUpperRightBoundsPointParserRuleCall_4_0()); 
	    }
		lv_upperRightBounds_4_0=rulePoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraphixCanvasRule());
	        }
       		set(
       			$current, 
       			"upperRightBounds",
        		lv_upperRightBounds_4_0, 
        		"Point");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGraphixCanvasAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getGraphixCanvasAccess().getLeftCurlyBracketKeyword_6());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getGraphixCanvasAccess().getContentGraphixElementParserRuleCall_7_0_0()); 
	    }
		lv_content_7_0=ruleGraphixElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraphixCanvasRule());
	        }
       		add(
       			$current, 
       			"content",
        		lv_content_7_0, 
        		"GraphixElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getGraphixCanvasAccess().getSemicolonKeyword_7_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGraphixCanvasAccess().getContentGraphixElementParserRuleCall_7_1_1_0()); 
	    }
		lv_content_9_0=ruleGraphixElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraphixCanvasRule());
	        }
       		add(
       			$current, 
       			"content",
        		lv_content_9_0, 
        		"GraphixElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getGraphixCanvasAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleGraphixElement
entryRuleGraphixElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraphixElementRule()); }
	 iv_ruleGraphixElement=ruleGraphixElement 
	 { $current=$iv_ruleGraphixElement.current; } 
	 EOF 
;

// Rule GraphixElement
ruleGraphixElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGraphixElementAccess().getCircleParserRuleCall_0()); 
    }
    this_Circle_0=ruleCircle
    { 
        $current = $this_Circle_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGraphixElementAccess().getColorParserRuleCall_1()); 
    }
    this_Color_1=ruleColor
    { 
        $current = $this_Color_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePoint
entryRulePoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPointRule()); }
	 iv_rulePoint=rulePoint 
	 { $current=$iv_rulePoint.current; } 
	 EOF 
;

// Rule Point
rulePoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPointAccess().getPointAction_0(),
            $current);
    }
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPointAccess().getLeftParenthesisKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPointAccess().getXEDoubleParserRuleCall_2_0()); 
	    }
		lv_x_2_0=ruleEDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointRule());
	        }
       		set(
       			$current, 
       			"x",
        		lv_x_2_0, 
        		"EDouble");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPointAccess().getVerticalLineKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPointAccess().getYEDoubleParserRuleCall_4_0()); 
	    }
		lv_y_4_0=ruleEDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointRule());
	        }
       		set(
       			$current, 
       			"y",
        		lv_y_4_0, 
        		"EDouble");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPointAccess().getRightParenthesisKeyword_5());
    }
)?)
;





// Entry rule entryRuleCircle
entryRuleCircle returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCircleRule()); }
	 iv_ruleCircle=ruleCircle 
	 { $current=$iv_ruleCircle.current; } 
	 EOF 
;

// Rule Circle
ruleCircle returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Circle' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCircleAccess().getCircleKeyword_0());
    }
	otherlv_1='at' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCircleAccess().getAtKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCircleAccess().getCenterPointParserRuleCall_2_0()); 
	    }
		lv_center_2_0=rulePoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCircleRule());
	        }
       		set(
       			$current, 
       			"center",
        		lv_center_2_0, 
        		"Point");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='radius' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCircleAccess().getRadiusKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCircleAccess().getRadiusEDoubleParserRuleCall_4_0()); 
	    }
		lv_radius_4_0=ruleEDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCircleRule());
	        }
       		set(
       			$current, 
       			"radius",
        		lv_radius_4_0, 
        		"EDouble");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_5='line' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCircleAccess().getLineKeyword_5_0_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCircleRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getCircleAccess().getLineColorColorCrossReference_5_0_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_7='fill' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCircleAccess().getFillKeyword_5_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCircleRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getCircleAccess().getFillColorColorCrossReference_5_1_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleColor
entryRuleColor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColorRule()); }
	 iv_ruleColor=ruleColor 
	 { $current=$iv_ruleColor.current; } 
	 EOF 
;

// Rule Color
ruleColor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getColorAccess().getColorAction_0(),
            $current);
    }
)	otherlv_1='Color' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getColorAccess().getColorKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColorAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColorRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getColorAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColorAccess().getRedEDoubleParserRuleCall_3_1_0()); 
	    }
		lv_red_4_0=ruleEDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColorRule());
	        }
       		set(
       			$current, 
       			"red",
        		lv_red_4_0, 
        		"EDouble");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getColorAccess().getCommaKeyword_3_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColorAccess().getGreenEDoubleParserRuleCall_3_3_0()); 
	    }
		lv_green_6_0=ruleEDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColorRule());
	        }
       		set(
       			$current, 
       			"green",
        		lv_green_6_0, 
        		"EDouble");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getColorAccess().getCommaKeyword_3_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColorAccess().getBlueEDoubleParserRuleCall_3_5_0()); 
	    }
		lv_blue_8_0=ruleEDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColorRule());
	        }
       		set(
       			$current, 
       			"blue",
        		lv_blue_8_0, 
        		"EDouble");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getColorAccess().getCommaKeyword_3_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColorAccess().getAlphaEDoubleParserRuleCall_3_6_1_0()); 
	    }
		lv_alpha_10_0=ruleEDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColorRule());
	        }
       		set(
       			$current, 
       			"alpha",
        		lv_alpha_10_0, 
        		"EDouble");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getColorAccess().getRightParenthesisKeyword_3_7());
    }
))
;





// Entry rule entryRuleEDouble
entryRuleEDouble returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEDoubleRule()); } 
	 iv_ruleEDouble=ruleEDouble 
	 { $current=$iv_ruleEDouble.current.getText(); }  
	 EOF 
;

// Rule EDouble
ruleEDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0()); 
    }
)?(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1()); 
    }
)?
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEDoubleAccess().getFullStopKeyword_2()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3()); 
    }
((
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_0()); 
    }

    |
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_1()); 
    }
)(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_4_1()); 
    }
)?    this_INT_7=RULE_INT    {
		$current.merge(this_INT_7);
    }

    { 
    newLeafNode(this_INT_7, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_4_2()); 
    }
)?)
    ;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


