/*
* generated by Xtext
*/
package net.winklerweb.cdoxtext.example.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GraphixGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class GraphixCanvasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GraphixCanvas");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCanvasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLowerLeftBoundsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLowerLeftBoundsPointParserRuleCall_2_0 = (RuleCall)cLowerLeftBoundsAssignment_2.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpperRightBoundsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpperRightBoundsPointParserRuleCall_4_0 = (RuleCall)cUpperRightBoundsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cContentAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cContentGraphixElementParserRuleCall_7_0_0 = (RuleCall)cContentAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cSemicolonKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cContentAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cContentGraphixElementParserRuleCall_7_1_1_0 = (RuleCall)cContentAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//GraphixCanvas:
		//	"Canvas" "(" lowerLeftBounds=Point ".." upperRightBounds=Point ")" "{" (content+=GraphixElement (";"
		//	content+=GraphixElement)*)? "}";
		public ParserRule getRule() { return rule; }

		//"Canvas" "(" lowerLeftBounds=Point ".." upperRightBounds=Point ")" "{" (content+=GraphixElement (";"
		//content+=GraphixElement)*)? "}"
		public Group getGroup() { return cGroup; }

		//"Canvas"
		public Keyword getCanvasKeyword_0() { return cCanvasKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//lowerLeftBounds=Point
		public Assignment getLowerLeftBoundsAssignment_2() { return cLowerLeftBoundsAssignment_2; }

		//Point
		public RuleCall getLowerLeftBoundsPointParserRuleCall_2_0() { return cLowerLeftBoundsPointParserRuleCall_2_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_3() { return cFullStopFullStopKeyword_3; }

		//upperRightBounds=Point
		public Assignment getUpperRightBoundsAssignment_4() { return cUpperRightBoundsAssignment_4; }

		//Point
		public RuleCall getUpperRightBoundsPointParserRuleCall_4_0() { return cUpperRightBoundsPointParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//(content+=GraphixElement (";" content+=GraphixElement)*)?
		public Group getGroup_7() { return cGroup_7; }

		//content+=GraphixElement
		public Assignment getContentAssignment_7_0() { return cContentAssignment_7_0; }

		//GraphixElement
		public RuleCall getContentGraphixElementParserRuleCall_7_0_0() { return cContentGraphixElementParserRuleCall_7_0_0; }

		//(";" content+=GraphixElement)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//";"
		public Keyword getSemicolonKeyword_7_1_0() { return cSemicolonKeyword_7_1_0; }

		//content+=GraphixElement
		public Assignment getContentAssignment_7_1_1() { return cContentAssignment_7_1_1; }

		//GraphixElement
		public RuleCall getContentGraphixElementParserRuleCall_7_1_1_0() { return cContentGraphixElementParserRuleCall_7_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class GraphixElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GraphixElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCircleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GraphixElement:
		//	Circle | Color;
		public ParserRule getRule() { return rule; }

		//Circle | Color
		public Alternatives getAlternatives() { return cAlternatives; }

		//Circle
		public RuleCall getCircleParserRuleCall_0() { return cCircleParserRuleCall_0; }

		//Color
		public RuleCall getColorParserRuleCall_1() { return cColorParserRuleCall_1; }
	}

	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXEDoubleParserRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYEDoubleParserRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Point:
		//	{Point} "("? x=EDouble "|" y=EDouble ")"?;
		public ParserRule getRule() { return rule; }

		//{Point} "("? x=EDouble "|" y=EDouble ")"?
		public Group getGroup() { return cGroup; }

		//{Point}
		public Action getPointAction_0() { return cPointAction_0; }

		//"("?
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//x=EDouble
		public Assignment getXAssignment_2() { return cXAssignment_2; }

		//EDouble
		public RuleCall getXEDoubleParserRuleCall_2_0() { return cXEDoubleParserRuleCall_2_0; }

		//"|"
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }

		//y=EDouble
		public Assignment getYAssignment_4() { return cYAssignment_4; }

		//EDouble
		public RuleCall getYEDoubleParserRuleCall_4_0() { return cYEDoubleParserRuleCall_4_0; }

		//")"?
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class CircleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Circle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCircleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCenterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCenterPointParserRuleCall_2_0 = (RuleCall)cCenterAssignment_2.eContents().get(0);
		private final Keyword cRadiusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRadiusAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRadiusEDoubleParserRuleCall_4_0 = (RuleCall)cRadiusAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLineKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cLineColorAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final CrossReference cLineColorColorCrossReference_5_0_1_0 = (CrossReference)cLineColorAssignment_5_0_1.eContents().get(0);
		private final RuleCall cLineColorColorEStringParserRuleCall_5_0_1_0_1 = (RuleCall)cLineColorColorCrossReference_5_0_1_0.eContents().get(1);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cFillKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cFillColorAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final CrossReference cFillColorColorCrossReference_5_1_1_0 = (CrossReference)cFillColorAssignment_5_1_1.eContents().get(0);
		private final RuleCall cFillColorColorEStringParserRuleCall_5_1_1_0_1 = (RuleCall)cFillColorColorCrossReference_5_1_1_0.eContents().get(1);
		
		//Circle:
		//	"Circle" "at" center=Point "radius" radius=EDouble ("line" lineColor=[Color|EString] | "fill"
		//	fillColor=[Color|EString])*;
		public ParserRule getRule() { return rule; }

		//"Circle" "at" center=Point "radius" radius=EDouble ("line" lineColor=[Color|EString] | "fill"
		//fillColor=[Color|EString])*
		public Group getGroup() { return cGroup; }

		//"Circle"
		public Keyword getCircleKeyword_0() { return cCircleKeyword_0; }

		//"at"
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }

		//center=Point
		public Assignment getCenterAssignment_2() { return cCenterAssignment_2; }

		//Point
		public RuleCall getCenterPointParserRuleCall_2_0() { return cCenterPointParserRuleCall_2_0; }

		//"radius"
		public Keyword getRadiusKeyword_3() { return cRadiusKeyword_3; }

		//radius=EDouble
		public Assignment getRadiusAssignment_4() { return cRadiusAssignment_4; }

		//EDouble
		public RuleCall getRadiusEDoubleParserRuleCall_4_0() { return cRadiusEDoubleParserRuleCall_4_0; }

		//("line" lineColor=[Color|EString] | "fill" fillColor=[Color|EString])*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"line" lineColor=[Color|EString]
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"line"
		public Keyword getLineKeyword_5_0_0() { return cLineKeyword_5_0_0; }

		//lineColor=[Color|EString]
		public Assignment getLineColorAssignment_5_0_1() { return cLineColorAssignment_5_0_1; }

		//[Color|EString]
		public CrossReference getLineColorColorCrossReference_5_0_1_0() { return cLineColorColorCrossReference_5_0_1_0; }

		//EString
		public RuleCall getLineColorColorEStringParserRuleCall_5_0_1_0_1() { return cLineColorColorEStringParserRuleCall_5_0_1_0_1; }

		//"fill" fillColor=[Color|EString]
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"fill"
		public Keyword getFillKeyword_5_1_0() { return cFillKeyword_5_1_0; }

		//fillColor=[Color|EString]
		public Assignment getFillColorAssignment_5_1_1() { return cFillColorAssignment_5_1_1; }

		//[Color|EString]
		public CrossReference getFillColorColorCrossReference_5_1_1_0() { return cFillColorColorCrossReference_5_1_1_0; }

		//EString
		public RuleCall getFillColorColorEStringParserRuleCall_5_1_1_0_1() { return cFillColorColorEStringParserRuleCall_5_1_1_0_1; }
	}

	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRedAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRedEDoubleParserRuleCall_3_1_0 = (RuleCall)cRedAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cGreenAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cGreenEDoubleParserRuleCall_3_3_0 = (RuleCall)cGreenAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cBlueAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cBlueEDoubleParserRuleCall_3_5_0 = (RuleCall)cBlueAssignment_3_5.eContents().get(0);
		private final Group cGroup_3_6 = (Group)cGroup_3.eContents().get(6);
		private final Keyword cCommaKeyword_3_6_0 = (Keyword)cGroup_3_6.eContents().get(0);
		private final Assignment cAlphaAssignment_3_6_1 = (Assignment)cGroup_3_6.eContents().get(1);
		private final RuleCall cAlphaEDoubleParserRuleCall_3_6_1_0 = (RuleCall)cAlphaAssignment_3_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_7 = (Keyword)cGroup_3.eContents().get(7);
		
		//Color:
		//	{Color} "Color" name=EString ("(" red=EDouble "," green=EDouble "," blue=EDouble ("," alpha=EDouble)? ")");
		public ParserRule getRule() { return rule; }

		//{Color} "Color" name=EString ("(" red=EDouble "," green=EDouble "," blue=EDouble ("," alpha=EDouble)? ")")
		public Group getGroup() { return cGroup; }

		//{Color}
		public Action getColorAction_0() { return cColorAction_0; }

		//"Color"
		public Keyword getColorKeyword_1() { return cColorKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"(" red=EDouble "," green=EDouble "," blue=EDouble ("," alpha=EDouble)? ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//red=EDouble
		public Assignment getRedAssignment_3_1() { return cRedAssignment_3_1; }

		//EDouble
		public RuleCall getRedEDoubleParserRuleCall_3_1_0() { return cRedEDoubleParserRuleCall_3_1_0; }

		//","
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }

		//green=EDouble
		public Assignment getGreenAssignment_3_3() { return cGreenAssignment_3_3; }

		//EDouble
		public RuleCall getGreenEDoubleParserRuleCall_3_3_0() { return cGreenEDoubleParserRuleCall_3_3_0; }

		//","
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }

		//blue=EDouble
		public Assignment getBlueAssignment_3_5() { return cBlueAssignment_3_5; }

		//EDouble
		public RuleCall getBlueEDoubleParserRuleCall_3_5_0() { return cBlueEDoubleParserRuleCall_3_5_0; }

		//("," alpha=EDouble)?
		public Group getGroup_3_6() { return cGroup_3_6; }

		//","
		public Keyword getCommaKeyword_3_6_0() { return cCommaKeyword_3_6_0; }

		//alpha=EDouble
		public Assignment getAlphaAssignment_3_6_1() { return cAlphaAssignment_3_6_1; }

		//EDouble
		public RuleCall getAlphaEDoubleParserRuleCall_3_6_1_0() { return cAlphaEDoubleParserRuleCall_3_6_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_7() { return cRightParenthesisKeyword_3_7; }
	}

	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT? "." INT (("E" | "e") "-"? INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }

		//(("E" | "e") "-"? INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"E" | "e"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"E"
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }

		//"e"
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }

		//"-"?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private GraphixCanvasElements pGraphixCanvas;
	private GraphixElementElements pGraphixElement;
	private PointElements pPoint;
	private CircleElements pCircle;
	private ColorElements pColor;
	private EDoubleElements pEDouble;
	private EStringElements pEString;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public GraphixGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.winklerweb.cdoxtext.example.Graphix".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GraphixCanvas:
	//	"Canvas" "(" lowerLeftBounds=Point ".." upperRightBounds=Point ")" "{" (content+=GraphixElement (";"
	//	content+=GraphixElement)*)? "}";
	public GraphixCanvasElements getGraphixCanvasAccess() {
		return (pGraphixCanvas != null) ? pGraphixCanvas : (pGraphixCanvas = new GraphixCanvasElements());
	}
	
	public ParserRule getGraphixCanvasRule() {
		return getGraphixCanvasAccess().getRule();
	}

	//GraphixElement:
	//	Circle | Color;
	public GraphixElementElements getGraphixElementAccess() {
		return (pGraphixElement != null) ? pGraphixElement : (pGraphixElement = new GraphixElementElements());
	}
	
	public ParserRule getGraphixElementRule() {
		return getGraphixElementAccess().getRule();
	}

	//Point:
	//	{Point} "("? x=EDouble "|" y=EDouble ")"?;
	public PointElements getPointAccess() {
		return (pPoint != null) ? pPoint : (pPoint = new PointElements());
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}

	//Circle:
	//	"Circle" "at" center=Point "radius" radius=EDouble ("line" lineColor=[Color|EString] | "fill"
	//	fillColor=[Color|EString])*;
	public CircleElements getCircleAccess() {
		return (pCircle != null) ? pCircle : (pCircle = new CircleElements());
	}
	
	public ParserRule getCircleRule() {
		return getCircleAccess().getRule();
	}

	//Color:
	//	{Color} "Color" name=EString ("(" red=EDouble "," green=EDouble "," blue=EDouble ("," alpha=EDouble)? ")");
	public ColorElements getColorAccess() {
		return (pColor != null) ? pColor : (pColor = new ColorElements());
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return (pEDouble != null) ? pEDouble : (pEDouble = new EDoubleElements());
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
